/*using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace QuickSortDemo {
   class Example {
      static public int Partition(int[] arr, int left, int right) {
         int pivot;
         pivot = arr[left];
         while (true) {
            while (arr[left] < pivot) {
               left++;
            }
            while (arr[right] > pivot) {
               right--;
            }
            if (left < right) {
               int temp = arr[right];
               arr[right] = arr[left];
               arr[left] = temp;
               left++;
               right--;
            } else {
               return right;
            }
         }
      }
      static public void quickSort(int[] arr, int left, int right) {
         int pivot;
         if (left < right) {
            pivot = Partition(arr, left, right);
            if (pivot > 1) {
               quickSort(arr, left, pivot - 1);
            }
            if (pivot + 1 < right) {
               quickSort(arr, pivot + 1, right);
            }
         }
      }
      static void Main(string[] args) {
         Console.Write("¬ведите количество элементов в массиве: ");
         int amount = Convert.ToInt32(Console.ReadLine());
         int[] arr = new int[amount];
         Console.Write("\n");

            Console.Write("—генерированный массив : ");

            Random rnd = new Random();
            for (int i = 0; i < amount; i++)
            {
                arr[i] = rnd.Next(-1000, 1000);
                Console.Write(arr[i] + " ");
            }
            Console.Write(" \n");

            quickSort(arr, 0, amount - 1);
         Console.Write("\nќтсортированный массив: ");   
         for (int j = 0; j < amount; j++) {
            Console.Write(arr[j] + " ");
         }
            Console.WriteLine("\n");
        }
   }
}*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

/*namespace RepeatAssignmentQ2
{
    class Program
    {
        static public int Partition(int[] myArray, int left, int right)
        {
            int pivot = myArray[left];
            while (true)
            {
                while (myArray[left] < pivot)
                    left++;

                while (myArray[right] > pivot)
                    right--;

                if (left < right)
                {
                    int temp = myArray[right];
                    myArray[right] = myArray[left];
                    myArray[left] = temp;
                    left++;
                    right--;
                }
                else
                {
                    return right;
                }

            }
        }

        static public void QuickSort_Recursive(int[] arr, int left, int right)
        {
            // For Recusrion
            if (left < right)
            {
                int pivot = Partition(arr, left, right);

                if (pivot > 1)
                    QuickSort_Recursive(arr, left, pivot - 1);

                if (pivot + 1 < right)
                    QuickSort_Recursive(arr, pivot + 1, right);
            }
        }*/

/*static void Main(string[] args)
{
    Random rnd = new Random();
    DateTime startTime = DateTime.Now;

    int ind = 0;
    int length = 200;
    int[] myArray = new int[length];

    while (ind < 200)
    {
        myArray[ind] = rnd.Next(-100, 300);
        ind++;
    }

    Console.Write("QuickSort by recursive method: \n");

    //QuickSort_Recursive(myArray, 0, length - 1);


    Array.Sort(myArray);
    for (int i = 0; i < 200; i++)
    {

        Console.Write(myArray[i] + " ");

    }
    //Console.Write("\n\nTotal Time: {0}\n", DateTime.Now - startTime);
    Console.WriteLine();



}
}
}*/